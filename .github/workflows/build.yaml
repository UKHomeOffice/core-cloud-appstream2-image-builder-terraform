name: Trigger Step Function & Wait

on:
  # Automatically after a successful infra run on main
  workflow_run:
    workflows: ["Infra Provision"]
    types: [completed]
    branches:
      - main


  # Manually, if you ever want to override builder/image names
  workflow_dispatch:
    inputs:
      builder_name:
        description: 'Unique name for the Image Builder instance'
        required: false
        type: string
      image_name:
        description: 'Desired AppStream Output image name'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: eu-west-2

jobs:
  build:
    name: Trigger Step Function & Wait
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch'
      || (github.event_name == 'workflow_run'
          && github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install yq binary
        run: |
          curl -L \
            https://github.com/mikefarah/yq/releases/download/v4.30.8/yq_linux_amd64 \
            -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq --version

      - name: Load config.yaml into env vars
        shell: bash
        run: |
          echo "SUBNET_ID=$(yq e '.config.subnet_id'      config.yaml)" >> $GITHUB_ENV
          echo "SECURITY_GROUP_ID=$(yq e '.config.security_group_id' config.yaml)" >> $GITHUB_ENV
          echo "LIVE_ACCOUNT_ID=$(yq e '.config.live_account_id'  config.yaml)" >> $GITHUB_ENV
          echo "PRELIVE_ACCOUNT_ID=$(yq e '.config.prelive_account_id' config.yaml)" >> $GITHUB_ENV
          echo "ACCOUNT_ID=$(yq e '.config.accounts.account_id' config.yaml)" >> $GITHUB_ENV

      - name: Determine builder & image names
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            echo "BUILDER_NAME=${{ github.event.inputs.builder_name }}" >> $GITHUB_ENV
            echo "IMAGE_NAME=${{ github.event.inputs.image_name }}"     >> $GITHUB_ENV
          else
            IMAGE_NAME=$(yq e '.config.base_image_name' config.yaml)
            BUILDER_NAME="${IMAGE_NAME}-builder"
            echo "BUILDER_NAME=$BUILDER_NAME" >> $GITHUB_ENV
            echo "IMAGE_NAME=$IMAGE_NAME"     >> $GITHUB_ENV
          fi
          echo "Using builder: $BUILDER_NAME"
          echo "Using image:   $IMAGE_NAME"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/cc-appstream2-terragrunt-apply-role
          aws-region:     ${{ env.AWS_REGION }}

      - name: Install Terragrunt & Terraform
        uses: gruntwork-io/terragrunt-action@v2
        env:
          INPUT_PRE_EXEC_0: |
            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
              -o /tmp/awscliv2.zip && \
            unzip -q /tmp/awscliv2.zip -d /tmp && \
            /tmp/aws/install --update && \
            rm -rf /tmp/aws /tmp/awscliv2.zip
        with:
          tf_version: 1.9.3
          tg_version: 0.59.6
          tg_dir: ./ccpamappstream
          tg_command: --help # we only need the install, so use a no-op command
        timeout-minutes: 10

      - name: Get Step Function State Machine ARN
        working-directory: ./ccpamappstream
        run: |
          SM_ARN=$(terragrunt output --raw state_machine_arn)
          echo "SM_ARN=$SM_ARN" >> $GITHUB_ENV
          echo "Resolved State Machine ARN: $SM_ARN"

      - name: Start Step Function Execution
        id: start
        run: |
          PAYLOAD=$(jq -n \
            --arg builder "$BUILDER_NAME" \
            --arg baseImage "$IMAGE_NAME" \
            --arg subnet "${{ env.SUBNET_ID }}" \
            --arg sg "${{ env.SECURITY_GROUP_ID }}" \
            --arg liveAcct "${{ env.LIVE_ACCOUNT_ID }}" \
            --arg preliveAcct "${{ env.PRELIVE_ACCOUNT_ID }}" \
            '{
              BuilderName:        $builder,
              BaseImageName:      $baseImage,
              SubnetIds:          [$subnet],
              SecurityGroupIds:   [$sg],
              live_account_id:    $liveAcct,
              prelive_account_id: $preliveAcct
            }')

          echo "Payload: $PAYLOAD"
          EXEC_ARN=$(aws stepfunctions start-execution \
            --state-machine-arn "$SM_ARN" \
            --input "$PAYLOAD" \
            --query executionArn --output text)
          echo "EXEC_ARN=$EXEC_ARN" >> $GITHUB_OUTPUT
          echo "Started execution: $EXEC_ARN"

      - name: Wait for Step Function Completion
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting for Step Function to succeed (ARN: ${{ steps.start.outputs.EXEC_ARN }})‚Ä¶"
          if ! aws stepfunctions wait execution-succeeded \
               --execution-arn "${{ steps.start.outputs.EXEC_ARN }}"; then
            echo "::error :: Step Function failed ‚Äî fetching details:"
            aws stepfunctions describe-execution \
              --execution-arn "${{ steps.start.outputs.EXEC_ARN }}" \
              --query '{Status:status,Error:stateMachineError,Cause:stateMachineCause,Output:output}' \
              --output json
            exit 1
          fi
          echo "‚úÖ Step Function succeeded!"

      - name: Final AppStream Image Status
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="$IMAGE_NAME"
          echo "üîç Checking status of AppStream image: $IMAGE"
          STATE=$(aws appstream describe-images \
            --names "$IMAGE" \
            --query 'Images[0].State' \
            --output text 2>/dev/null || echo "NOT_FOUND")
          echo "State: $STATE"
          if [[ "$STATE" == "AVAILABLE" ]]; then
            echo "‚úÖ Image is available"
            aws appstream describe-images \
              --names "$IMAGE" \
              --query 'Images[0].{Name:Name,State:State,CreatedTime:CreatedTime,Description:Description}' \
              --output table
          else
            echo "‚ö†Ô∏è Image not available yet: $STATE"
            exit 1
          fi

      - name: Verify Image Sharing
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="$IMAGE_NAME"
          echo "Verifying sharing permissions for $IMAGE‚Ä¶"
          aws appstream describe-image-permissions \
            --image-name "$IMAGE" \
            --query 'Principals[?Permissions[?FleetCreation==`true`]].AccountID' \
            --output table || echo "Unable to retrieve sharing permissions"
          echo "Should be shared with: ${{ env.LIVE_ACCOUNT_ID }}, ${{ env.PRELIVE_ACCOUNT_ID }}"

      - name: Cleanup Summary
        shell: bash
        run: |
          set -euo pipefail
          echo "üéâ AppStream Image Build Complete!"
          echo "Builder: $BUILDER_NAME"
          echo "Image:   $IMAGE_NAME"
          echo "Exec ARN: ${{ steps.start.outputs.EXEC_ARN }}"
