{
  "schemaVersion": "0.3",
  "description": "Install dependencies and build AppStream Rocky Linux image",
  "parameters": {
    "BuilderName": {
      "type": "String",
      "description": "Name of the AppStream Image Builder instance"
    },
    "ImageName": {
      "type": "String",
      "description": "Name for the newly created AppStream image"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "InstallPackages",
      "inputs": {
        "runCommand": [
          "sudo yum update -y",
          "curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o awscliv2.zip && unzip awscliv2.zip && sudo ./aws/install --update",
          "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"",
          "sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl",
          "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod +x get_helm.sh && ./get_helm.sh",
          "sudo yum install -y jq firefox code postgresql docker python3 nodejs",
          "sudo systemctl enable --now docker",
          "sudo curl https://intoli.com/install-google-chrome.sh | bash",
          "sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc && sudo dnf config-manager --add-repo https://packages.microsoft.com/yumrepos/edge && sudo dnf install -y microsoft-edge-stable"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "AddApplicationsToCatalog",
      "inputs": {
        "runCommand": [
          "declare -A apps=([Firefox]=\"/usr/bin/firefox\" [vscode]=\"/usr/bin/code\" [kubectl]=\"/usr/local/bin/kubectl\" [helm]=\"/usr/local/bin/helm\" [psql]=\"/usr/bin/psql\" [aws-cli]=\"/usr/local/bin/aws\" [jq]=\"/usr/bin/jq\" [docker]=\"/usr/bin/docker\" [python3]=\"/usr/bin/python3\" [nodejs]=\"/usr/bin/node\" [chrome]=\"/usr/bin/google-chrome\" [msedge]=\"/usr/bin/microsoft-edge\")",
          "for name in \"${!apps[@]}\"; do",
          "  path=${apps[$name]};",
          "  if [[ -x \"$path\" ]]; then",
          "    AppStreamImageAssistant add-application --name \"$name\" --absolute-app-path \"$path\";",
          "  fi",
          "done"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "CreateAppStreamImage",
      "inputs": {
        "runCommand": [
          "AppStreamImageAssistant create-image --name {{ ImageName }}"
        ]
      }
    }
  ]
}
